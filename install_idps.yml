---
- hosts: 127.0.0.1
  connection: local
  
  tasks:
   - name: Install Fail2ban
     apt: pkg=fail2ban state=installed update_cache=true
     
   - name: Copy configuration files   
     copy: src={{ item.src }} dest={{ item.dest }}
     with_items:
       - { src: './config/idps/jail.local', dest: '/etc/fail2ban/' }
       - { src: './config/idps/middleware.conf', dest: '/etc/fail2ban/filter.d/' }
       - { src: './config/idps/iptables-middleware.conf', dest: '/etc/fail2ban/action.d/' }
     
     become: yes
  
   - name: Restart Fail2ban
     service: name=fail2ban state=restarted
     become: yes

   - name: Ensure apt cache is up to date
     apt: update_cache=yes
  
   - name: Ensure packages are installed
     apt: name={{item}}
     with_items:
        - postgresql-9.3
        - libpq-dev
        - python-psycopg2
   
   - name: Copy Postgresql configuration file
     shell: sudo rm /etc/postgresql/9.3/main/pg_hba.conf
     copy: src={{item.src}} dest={{item.dest}}
     with_items:
       - {src: './config/idps/pg_hba.conf', dest: '/etc/postgresql/9.3/main/'}

- hosts: 127.0.0.1
  connection: local
  become: yes
  become_user: postgres
  gather_facts: no

  vars_prompt:

  - name: "db_password"
    prompt: "Enter database password"
    private: yes

  - name: "hmac_key"
    prompt: "Enter HMAC key to be used for securing logs"
    private: yes

  vars:
    dbname: rbccps
    dbuser: idps
    dbpassword: {{db_password}}

  tasks:

  - name: Create vault file for IDPS
    shell: touch keys.yml
    blockinfile:
      path: ./keys.yml
      insertafter: EOF
      content: "db_password" + "{{db_password}}"
    
    blockinfile:
      path: ./keys.yml
      insertafter: EOF
      content: "hmac_key" |
       {{hmac_key}}
    shell: ansible-vault encrypt keys.yml

  - name: Ensure database is created
    postgresql_db: name={{dbname}}

  - name: Ensure user has access to database
    postgresql_user: db={{dbname}} name={{dbuser}} password={{dbpassword}} priv=ALL

  - name: Ensure user does not have unnecessary privilege
    postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB
  
  - name: Ensure no other user can access the database
    postgresql_privs: db={{dbname}} role=PUBLIC type=database priv=ALL state=absent
  
